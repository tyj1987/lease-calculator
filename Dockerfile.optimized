# 优化版本的Dockerfile - 大幅减小镜像大小
# 使用多阶段构建，分离开发依赖和生产依赖

# ===== 构建阶段 =====
FROM python:3.10-slim as builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# 只复制生产环境需要的依赖
COPY backend/requirements-prod.txt /app/requirements-prod.txt

# 安装Python依赖到临时目录
RUN pip install --user --no-cache-dir -r requirements-prod.txt

# ===== 生产阶段 =====
FROM python:3.10-slim as production

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=app.py \
    FLASK_ENV=production \
    PATH=/root/.local/bin:$PATH

# 只安装运行时需要的系统依赖
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 从构建阶段复制Python包
COPY --from=builder /root/.local /root/.local

# 设置工作目录
WORKDIR /app

# 只复制必要的应用文件
COPY backend/app.py /app/backend/
COPY backend/lease_calculator.py /app/backend/
COPY frontend/build/ /app/frontend/build/

# 创建必要的目录
RUN mkdir -p /app/logs /app/backend

# 设置工作目录为后端
WORKDIR /app/backend

# 暴露端口
EXPOSE 5002

# 健康检查（使用Python的urllib而不是curl）
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:5002/api/health')" || exit 1

# 启动命令
CMD ["python", "app.py"]
