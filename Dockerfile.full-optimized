# 功能完整的优化Dockerfile - 保持所有业务功能
# 目标：从859MB减少到400-500MB

# ===== 构建阶段 =====
FROM python:3.10-slim as builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖（只在构建时需要）
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    pkg-config \
    libfreetype6-dev \
    libpng-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 复制并安装生产依赖
COPY backend/requirements-full-prod.txt /app/
RUN pip install --user --no-cache-dir --no-warn-script-location \
    -r requirements-full-prod.txt

# ===== 生产阶段 =====
FROM python:3.10-slim

# 设置环境变量
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=app.py \
    FLASK_ENV=production \
    PATH=/root/.local/bin:$PATH

# 安装运行时依赖（最小化）
RUN apt-get update && apt-get install -y \
    curl \
    libfreetype6 \
    libpng16-16 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# 从构建阶段复制Python包
COPY --from=builder /root/.local /root/.local

# 设置工作目录
WORKDIR /app

# 复制应用代码（使用.dockerignore优化）
COPY backend/ /app/backend/
COPY frontend/ /app/frontend/
COPY config/ /app/config/

# 创建必要目录
RUN mkdir -p /app/logs

# 设置matplotlib后端（避免GUI依赖）
ENV MPLBACKEND=Agg

# 设置工作目录
WORKDIR /app/backend

# 暴露端口
EXPOSE 5002

# 健康检查
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5002/api/health || exit 1

# 启动命令
CMD ["python", "app.py"]
